-- MySQL Script generated by MySQL Workbench
-- Thu Nov 16 15:27:12 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema fotograf
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema fotograf
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `fotograf` DEFAULT CHARACTER SET utf8 ;
USE `fotograf` ;

-- -----------------------------------------------------
-- Table `fotograf`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`User` (
  `id` INT NOT NULL,
  `username` VARCHAR(255) NULL,
  `password` VARCHAR(255) NULL,
  `name` VARCHAR(255) NULL,
  `surname` VARCHAR(255) NULL,
  `photo` BLOB NULL,
  `city` VARCHAR(255) NULL,
  `email` VARCHAR(255) NULL,
  `tel` VARCHAR(20) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`Role` (
  `id` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`User_Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`User_Role` (
  `User_id` INT NOT NULL,
  `Role_id` INT NOT NULL,
  `Office_id` INT NOT NULL,
  INDEX `fk_User_Role_User_idx` (`User_id` ASC),
  INDEX `fk_User_Role_Role1_idx` (`Role_id` ASC),
  INDEX `fk_User_Role_Office1_idx` (`Office_id` ASC),
  PRIMARY KEY (`User_id`),
  CONSTRAINT `fk_User_Role_User`
    FOREIGN KEY (`User_id`)
    REFERENCES `fotograf`.`User` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_Role_Role1`
    FOREIGN KEY (`Role_id`)
    REFERENCES `fotograf`.`Role` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_Role_Office1`
    FOREIGN KEY (`Office_id`)
    REFERENCES `fotograf`.`Office` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`Order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`Order` (
  `id` INT NOT NULL,
  `date` DATETIME NULL,
  `description` VARCHAR(255) NULL,
  `User_Role_User_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Order_User_Role1_idx` (`User_Role_User_id` ASC),
  CONSTRAINT `fk_Order_User_Role1`
    FOREIGN KEY (`User_Role_User_id`)
    REFERENCES `fotograf`.`User_Role` (`User_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`Office`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`Office` (
  `id` INT NOT NULL,
  `calendar` DATE NULL,
  `Order_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Office_Order1_idx` (`Order_id` ASC),
  CONSTRAINT `fk_Office_Order1`
    FOREIGN KEY (`Order_id`)
    REFERENCES `fotograf`.`Order` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`Album`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`Album` (
  `id` INT NOT NULL,
  `name` VARCHAR(255) NULL,
  `description` VARCHAR(255) NULL,
  `User_Role_User_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Album_User_Role1_idx` (`User_Role_User_id` ASC),
  CONSTRAINT `fk_Album_User_Role1`
    FOREIGN KEY (`User_Role_User_id`)
    REFERENCES `fotograf`.`User_Role` (`User_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`Picture`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`Picture` (
  `id` INT NOT NULL,
  `title` VARCHAR(255) NULL,
  `photo` BLOB NULL,
  `Album_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Picture_Album1_idx` (`Album_id` ASC),
  CONSTRAINT `fk_Picture_Album1`
    FOREIGN KEY (`Album_id`)
    REFERENCES `fotograf`.`Album` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`Score`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`Score` (
  `id` INT NOT NULL,
  `value` DOUBLE NULL,
  `User_Role_User_id` INT NOT NULL,
  `Album_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Score_User_Role1_idx` (`User_Role_User_id` ASC),
  INDEX `fk_Score_Album1_idx` (`Album_id` ASC),
  CONSTRAINT `fk_Score_User_Role1`
    FOREIGN KEY (`User_Role_User_id`)
    REFERENCES `fotograf`.`User_Role` (`User_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Score_Album1`
    FOREIGN KEY (`Album_id`)
    REFERENCES `fotograf`.`Album` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `fotograf`.`Comment`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `fotograf`.`Comment` (
  `id` INT NOT NULL,
  `description` TEXT NULL,
  `User_Role_User_id` INT NOT NULL,
  `Album_id` INT NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_Comment_User_Role1_idx` (`User_Role_User_id` ASC),
  INDEX `fk_Comment_Album1_idx` (`Album_id` ASC),
  CONSTRAINT `fk_Comment_User_Role1`
    FOREIGN KEY (`User_Role_User_id`)
    REFERENCES `fotograf`.`User_Role` (`User_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Comment_Album1`
    FOREIGN KEY (`Album_id`)
    REFERENCES `fotograf`.`Album` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
